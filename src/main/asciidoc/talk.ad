= Spring Data JDBC
:icons: font
:twitter-tag: @jensschauder
:conference-tag: @jug_de
:talk-tag: #sd-jdbc
:slide-link: http://bit.ly/talk-sd-jdbc
:linkattrs:
:main-incl: {src-incl}/src/main/java/de/schauderhaft/spring/data/jdbc/talk/
:test-incl: {src-incl}/src/test/java/de/schauderhaft/spring/data/jdbc/talk/
:res-incl: {src-incl}/src/main/resources/

include::footer.ad[]

== Talk Motto

[quote, "Reid Hoffman"]
____
If you are not embarrassed by the first version of your product, you’ve launched too late.
____

== Spring Data

* Consistent Programming Model for data access.

* Inspired by DDD

* Modules for JPA, Mongo, Cassandra, Neo4j ...

* Repository Abstraction

== Spring Data Jdbc vs JPA

Pick, Spade and Fork

vs

Mähdrescher

=== JPAs complexity

* Lazy Loading (Exception)

* Dirty Checking

* Session / 1st Level Cache

* Proxies for Entities

* You can map anything

=== Design Choices

* No Lazy Loading

* No Caching

* No Proxies

* No deferred flushing

* Very simple & limited & opinionated ORM

=== Simplicity is King

Complexity is tempting

=== Consider SDJ if you

* want to custom code most SQL anyway

* find yourself fighting JPA

* want to have DDD Aggregates

(but still want to use a RDBMS)

== CrudRepository

=== Dependencies

=== !

[source, xml, indent=0, tabsize=2]
----
include::{src-incl}pom.xml[tags=sdjdbc]
----

=== The usual suspects

* hsqldb
* lombok
* junit
* spring-test
* assertj

=== Configuration

=== !

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=main]
----

=== Entity

[source, java, indent=0, tabsize=2]
----
include::{main-incl}Workout.java[tags=main]
----

=== Entity

All you need is an `@Id`

* getters/setters are optional

* default constructor is optional

=== Repository

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=main]
----

=== Schema

[source, sql, indent=0, tabsize=2]
----
include::{res-incl}create-schema.sql[]
----

=== Create, Read

[source, java, indent=0, tabsize=2]
----
include::{test-incl}SpringleticsTest.java[tags=create]
----

=== Update, Delete

[source, java, indent=0, tabsize=2]
----
include::{test-incl}SpringleticsTest.java[tags=update]
----

=== Log Output

[source,sql]
----
insert into Workout (name, focus) values (?, ?)
SELECT Workout.id AS id, Workout.name AS name, Workout.focus AS focus
       FROM Workout WHERE Workout.id = ?
update Workout set id = ?, name = ?, focus = ? where id = ?
DELETE from Workout where id = ?
----

=== Methods in CrudRepository

[source, java]
----
	<S extends T> S save(S entity);
	<S extends T> Iterable<S> saveAll(Iterable<S> entities);
	Optional<T> findById(ID id);
	boolean existsById(ID id);
	Iterable<T> findAll();
	Iterable<T> findAllById(Iterable<ID> ids);
	long count();
	void deleteById(ID id);
	void delete(T entity);
	void deleteAll(Iterable<? extends T> entities);
	void deleteAll();
----

== NamingStrategy

=== PrefixNamingStrategy

[source, java, indent=0, tabsize=2]
----
include::{main-incl}namingstrategy/PrefixNamingStrategy.java[tags=naming]
----

=== Dynamic NamingStrategy

[source, java, indent=0, tabsize=2]
----
	private final ThreadLocal<String> schema = new ThreadLocal<>();

	new NamingStrategy() {

		@Override
		public String getSchema() {
			return schema.get();
		}
	};
----

== Non trivial Aggregates

=== Design Challenge

CRUD Operations for entities with references

aka ORM

=== Springletics Workout

[source,java]
----
classWorkout {
    // ...
    List<Exercise> exercises
    // ...
}
----

=== Pseudo Code

[source,pseudo]
----
wo = createWorkout();
wo = repository.save(wo);
wo = changeWorkout(wo);
repository.save(wo);
----

=== SQL Statments

[source,sql]
----
// first save
insert into Workout (name, focus) values (?, ?)
insert into Exercise (name, description, Workout, Workout_key) values (?, ?, ?, ?)

// second save
DELETE FROM Exercise WHERE Workout = ?
update Workout set id = ?, name = ?, focus = ? where id = ?
insert into Exercise (name, description, Workout, Workout_key) values (?, ?, ?, ?)
----

=== WAT?

* **DELETE ALL referenced Entities!**

* UPDATE Aggregate Root

* REINSERT ALL referenced Entities

=== What will improve

* DELETE ALL formerly referenced Entities

* UPDATE Aggregate Root

* UPDATE still referenced Entities

* INSERT new Entities

== => No Many-to-X relations!

=== Repositories work on Aggregates

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____
Aggregates are the basic element of transfer of data storage - you request to load or save whole aggregates.
____

=== Aggregate

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____

Aggregate is a pattern in Domain-Driven Design.
A DDD aggregate is a cluster of domain objects that can be treated as a single unit.
____

=== Aggregate Root

[quote, "Martin Fowler", https://martinfowler.com/bliki/DDD_Aggregate.html]
____

An aggregate will have one of its component objects be the aggregate root.
Any references from outside the aggregate should only go to the aggregate root.
The root can thus ensure the integrity of the aggregate as a whole.
____

=== Many to X relations

If multiple Aggregate roots reference X,

X must be another Aggregate Root.

=> Not part of this Aggregate.

=== What is part of the Aggregate?

Everything referenced.

=== What to do

* Just reference an id.

=== But I don't like that!

* That's ok.

Use

* `@Query`

* Custom method implementations

* Custom base repository

=== Just consider for a moment

* It is a strong constraint

* It might improve your architecture

== Events

=== Register a Listener

[source, java, indent=0, tabsize=2]
----
include::{main-incl}BeforeSaveListener.java[tags=main]
----

=== Available Events

* `BeforeSave`
* `AfterSave`
* `BeforeDelete`
* `AfterDelete`
* `AfterCreation` - when an Aggregate got instantiated from the database

=== `AggregateChange`

* A model of the changes to be applied to the database
* contains a **mutable** list of `DbAction` s.

=== `DbAction`

Represents a single SQL statement to be executed against the database.

=== Do whatever you want

* Access the repository
* change the entities
* **Change** the `AggregateChange`!

== MyBatis

=== How?

* CRUD methods get translated into DbActions
* Each action gets mapped to a MyBatis query id.
* If not found default implementation is used.

Example: Deleting all via a give property path referenced entities -> `deleteAll.<propertyPath>`

=== Dependencies

[source, xml, indent=0, tabsize=2]
----
include::{src-incl}pom.xml[tags=mybatis]
----

=== Context

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=mybatis1]
----

=== Context

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=mybatis2]
----

=== Context

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=mybatis3]
----

=== Mapping

[source, xml, indent=0, tabsize=2]
----
include::{src-incl}src/main/resources/de/schauderhaft/spring/data/jdbc/talk/WorkoutMapper.xml[]
----

=== Thanks!

**Kazuki Shimizu**

kazuki43zoo

== `@Query`

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=query]
----

=== `@Modifying`

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=modifying]
----

=== RowMapper

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=rowmapper1]
----

=== RowMapper

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=rowmapper2]
----

== Integration with SD-Rest

Make it a bootiful Webapplication

=== Spring Data JDBC specific

Almost nothing.

Entities need to be Beans for JSON serializer.

== (Maybe) upcoming

Not promising anything.

=== Auditing

=== Better CRUD

upserts?

=== Derived Queries

=== Sorting and Paging

=== Named Queries with MyBatis

=== Named Queryies via Properties

=== Spring Boot Support

PoC: https://github.com/schauder/spring-data-jdbc-boot-starter

include::self.ad[]

=== References

* Github: https://github.com/spring-projects/spring-data-jdbc

* Project: https://projects.spring.io/spring-data-jdbc/

* Examples: https://github.com/spring-projects/spring-data-examples/tree/master/jdbc

* Slides on Github: https://github.com/schauder/talk-spring-data-jdbc

* Freeletics: https://www.freeletics.com