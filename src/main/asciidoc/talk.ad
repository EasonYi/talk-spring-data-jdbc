= Spring Data JDBC
:icons: font
:twitter-tag: @jensschauder
:conference-tag: @jug_de
:talk-tag: #sd-jdbc
:slide-link: to be defined
:linkattrs:
:main-incl: {src-incl}/src/main/java/de/schauderhaft/spring/data/jdbc/talk/
:test-incl: {src-incl}/src/test/java/de/schauderhaft/spring/data/jdbc/talk/
:res-incl: {src-incl}/src/main/resources/

include::footer.ad[]

== Spring Data

== Spring Data Jdbc

== SDJ vs JPA

== CrudRepository

=== Dependencies

=== !

[source, xml, indent=0, tabsize=2]
----
include::{src-incl}pom.xml[tags=sdjdbc]
----

=== The usual suspects

* hsqldb
* lombok
* junit
* spring-test
* org.assertj
* assertj-core

=== Configuration

=== !

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=main]
----

=== Entity

[source, java, indent=0, tabsize=2]
----
include::{main-incl}Workout.java[tags=main]
----

=== Entity

All you need is an `@Id`

* getters/setters are optional

* default constructor is optional

=== Repository

[source, java, indent=0, tabsize=2]
----
include::{main-incl}WorkoutRepository.java[tags=main]
----

=== Schema

[source, sql, indent=0, tabsize=2]
----
include::{res-incl}schema.sql[]
----

=== Create, Read

[source, java, indent=0, tabsize=2]
----
include::{test-incl}SpringleticsTest.java[tags=create]
----

=== Update, Delete

[source, java, indent=0, tabsize=2]
----
include::{test-incl}SpringleticsTest.java[tags=update]
----

=== Log Output

[source,sql]
----
insert into Workout (name, focus) values (?, ?)
SELECT Workout.id AS id, Workout.name AS name, Workout.focus AS focus
       FROM Workout WHERE Workout.id = ?
update Workout set id = ?, name = ?, focus = ? where id = ?
DELETE from Workout where id = ?
----

=== NamingStrategy

[source, java, indent=0, tabsize=2]
----
include::{main-incl}SpringleticsConfiguration.java[tags=naming]
----

=== Dynamic NamingStrategy

[source, java, indent=0, tabsize=2]
----
	private final ThreadLocal<String> schema = new ThreadLocal<>();

	new NamingStrategy() {

		@Override
		public String getSchema() {
			return schema.get();
		}
	};
----

== MyBatis

== `@Query`

=== `@Modifying`

=== RowMapper

== Events

== Integration with SD-Rest

== (Maybe) upcoming

Nothing promised.

=== Auditing

=== Better CRUD

upserts?

=== Derived Queries

=== Paging

=== Named Queries with MyBatis

=== Named Queryies via Properties

=== References

=== Spring Boot Support

include::self.ad[]
